#!/bin/sh

######################################################################
#
# EXFLOCK : An Exclusive File Lock Command That Is Like the flock(2)
#
# Usage  : exflock <seconds> <file> [maxlifetime]
#          <seconds> ...... maximum waiting time to succeed locking
#          <file> ......... the path of the file you want to lock
#          [maxlifetime] .. the maximum life of the locking process (sec)
#                           (0 means infinity, and default is 45)
#
# Return : ==0 ... success to locking
#          !=0 ... failure
#
# * This command tries to do exclusive flock and return locking process
#   ID if it succeeds.
# * Locking is kept even when the next command starts.
# * When you want to unlock, do one of the following.
#   (a) Terminate the process which executed exflock.
#       (then the locking process will also terminate itself.)
#   (b) Execute the command "kill <PID>"
#       (<PID> is the number you got from me as the locking process ID.)
#   (c) Wait for timeout you set by <maxlifetime>
# * IMPORTANTS
#   - This command now supports the following Operating Systems.
#       FreeBSD, Linux, NetBSD
#     I want to know how to lock file on the other Operating Systems.
#
# Sample : flock_pid=$(exflock 5 "file_to_flock")
#          case $flock_pid in '') echo 'fail to lock'; exit 1;; esac
#              :
#          (here is the locked zone)
#              :
#          kill $flock_pid
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2020-12-06
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, We are fed up with the side effects which are brought
# about by the major licenses.
#
# The latest version is distributed at the following page.
# https://github.com/ShellShoccar-jpn/misc-tools
#
######################################################################

readonly DEFAULT_MAXLIFETIME=45


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
export PATH="$(command -p getconf PATH 2>/dev/null)${PATH+:}${PATH-}"
case $PATH in :*) PATH=${PATH#?};; esac
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage  : ${0##*/} <seconds> <file> [maxlifetime]
	         <seconds> ...... maximum waiting time to succeed locking
	         <file> ......... the path of the file you want to lock
	         [maxlifetime] .. the maximum life of the locking process (sec)
	                          (0 means infinity, and default=$DEFAULT_MAXLIFETIME)
	          * See the header comment on this command file for more infomation
	Version : 2020-12-06 07:32:01 JST
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}


######################################################################
# Prepare Main Routine
######################################################################

# === Define functions ===============================================
# --- FUNC: Make a Temporary File ------------------------------------
# arg   : (none)
# ret   : 0 when succeeded
# stdout: path of the generated temporary file
LFs=$(printf '\\\n_');LFs=${LFs%_} # Use as a "\n" in s-command of sed
mktempf0() {
  # --- parameters, etc.
  num_of_digits=16  # Length of Random String
  n=10              # Max Times of Retrying
  chrs='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_'
                    # Available letters
  # --- call built-in mktemp if exists
  type mktemp >/dev/null 2>&1 && {
    mktemp -t tmp.${0##*/}.$$.XXXXXXXXXXXXXXXX
    return $?
  }
  # --- set the temporary directory
  Dir_tmp=$(set | grep -q ^TMPDIR= | sed 's/^[^=]\{1,\}=//');
  case "$Dir_tmp" in
    '') Dir_tmp='/tmp'      ;;
    /)  Dir_tmp=''          ;;
    *)  Dir_tmp=${Dir_tmp%/};;
  esac
  # --- mktemp loop
  while [ $n -ge 0 ]; do
    # --- Generate Ramdom string
    # calculate the number of words which required
    nw=$(echo "${num_of_digits}*l(${#chrs})/11.09+1" | # 11.09=ln(65536)
         bc -l                                       |
         sed 's/\..*$//'                             )
    # make a random hexadecimal digit
    if [ -c /dev/urandom ]; then
      hstr=$(dd if=/dev/urandom bs=2 count=$nw 2>/dev/null |
             od -A n -t x2 -v                              |
             tr 'abcdef ' 'ABCDEF\n'                       |
             tr -Cd 0123456789ABCDEF                       )
    else
      hstr=$( (ps -Ao pid,etime,pcpu,vsz; date)         |
             od -t d4 -A n -v                           |
             sed 's/[^0-9]\{1,\}/'"$LFs"'/g'            |
             grep '[0-9]'                               |
             tail -n 42                                 |
             sed 's/.*\(.\{8\}\)$/\1/g'                 |
             awk 'BEGIN{a=-2147483648;}                 #
                       {a+=$1;        }                 #
                  END  {                                #
                    srand(a);                           #
                    for(i=0;i<'$nw';i++){               #
                      printf("%02X",int(rand()*65536)); #
                    }                                   #
                  }'                                    )
    fi
    # make a random string from the hexadecimal digit
    s=$(echo "obase=${#chrs};ibase=16;$hstr"                     |
        bc                                                       |
        tr -d '\\\n'                                             |
        tr ' ' '\n'                                              |
        awk 'BEGIN  {for(i=1;i<'$num_of_digits';i++){print 0;}}  #
             /[0-9]/{print;                                   }' |
        awk 'BEGIN  {ORS="";                                     #
                     s="'"$chrs"'";                              #
                     for(i=0;i<length(s);i++){                   #
                       c[i]=substr(s,i+1,1);                     #
                     }                        }                  #
             /[0-9]/{print c[$0*1];           }'                 |
        tail -c $num_of_digits                                   )
    # --- Making the file path
    Path_target="${Dir_tmp}/tmp.${0##*/}.$$.$s"
    # --- Making the file
    (set -C; umask 177; : > "$Path_target") 2>/dev/null || {
      [ -f "$Path_target" ] && { n=$((n-1)); continue; }
      n=-1; break;
    }
    break
  done
  # --- print error message when failed to make a file
  case "$n" in -1) return 1;; esac
  # --- print the path of the file
  printf '%s\n' "$Path_target"
  # --- return successfully
  return 0
}



######################################################################
# Main Routine
######################################################################

# === Judge which is my flock command ================================
case $(uname) in
  FreeBSD) CMD_flock='lockf'              ;;
  Linux)   CMD_flock='flock'              ;;
  NetBSD)  CMD_flock='flock'              ;;
  *)       error_exit 1 'Non-supported OS';;
esac

# === Judge which I have started as a parent or a child ==============
while :; do
  case $#       in 3)                :;; *) check='p1'; break;; esac
  case ${3##*/} in "tmp.${0##*/}."*) :;; *) check='p2'; break;; esac
  [ -s "$3" ] || {                          check='p3'; break; }
  case $1 in                      *[!0-9]*) check='p4'; break;; esac
  check=$(ps -Ao ppid,pid,args                                       |
          awk -v trgpid=$1 -v me=$$ '                                #
            {    p[$2]=$1;                                         } #
            END {print not_my_ans(me,trgpid) ? "p5" : "c"          } #
            function not_my_ans(pid,trgpid) {                        #
                 if (pid==trgpid) {return 0;}                        #
                 return (pid in p) ? not_my_ans(p[pid],trgpid) : 1;}')
break; done


# ===== ROUTINE AS A PARENT ==========================================
case $check in 'p'?)
  #
  # --- exit trap (for parent) ---------------------------------------
  exit_trap () {
    set -- ${1:-} $?  # $? is set as $1 if no argument given
    trap '' EXIT HUP INT QUIT PIPE ALRM TERM
    rm -f "${temp_datafile:-}"
    trap -  EXIT HUP INT QUIT PIPE ALRM TERM
    exit $1
  }
  #
  # --- parse the arguments ------------------------------------------
  case $# in             0) print_usage_and_exit;; esac
  printf '%s\n' "$1" | grep '^[0-9]\{1,\}$' >/dev/null 2>&1
  case $? in      0) :;; *) print_usage_and_exit;; esac
  waitsec=$1
  shift
  case $# in             0) print_usage_and_exit;; esac
  [ -f "$1"  ] || print_usage_and_exit
  file=$1
  case "$file" in -|/*|./*|../*) :;; *) file="./$file";; esac
  shift
  case $# in   [01]) :;; *) print_usage_and_exit;; esac
  case $# in
    1) printf '%s\n' "$1" | grep -q '^[0-9]\{1,\}$'
       case $? in 0) :;; *) print_usage_and_exit;; esac
       maxlifetime=$1                                   ;;
    0) maxlifetime=$DEFAULT_MAXLIFETIME                 ;;
  esac
  #
  # --- make stderr silent -------------------------------------------
  #exec 3>&2 2>/dev/null # (a)    If you want to debug this program,
  exec 2>/dev/null 3>&2  # (b)    enable (a) line instead of (b) line.
  #
  # --- enable the exit trap -----------------------------------------
  trap 'exit_trap' EXIT HUP INT QUIT PIPE ALRM TERM
  #
  # --- investigate the caller process ID ----------------------------
  pid=$$
  pid=$(ps -Ao pid,ppid | awk '$1=='$pid'{print $2}')
  #
  # --- prepare for locking -------------------------------------------
  sleep 100 & # This is to wait for success or failure of starting of the child
  sleepjob_pid=$!
  temp_datafile=$(mktempf0)
  case $? in
    0) :                                                                ;;
    *) printf '%s\n' "${0##*/}: Can't make a tempfile" 1>&3; exit_trap 2;;
  esac
  printf '%s' "-$sleepjob_pid" > "$temp_datafile"
  #
  # --- execute locking process, which is the child ------------------
  case $(uname) in
    FreeBSD)
      {
        lockf -ks -t $waitsec "$file"               \
        "$0" "$pid" "$maxlifetime" "$temp_datafile" ||
        kill -s TERM $sleepjob_pid
      } >/dev/null 2>&1 </dev/null &
      ;;
    Linux)
      {
        flock --timeout=$waitsec "$file"            \
        "$0" "$pid" "$maxlifetime" "$temp_datafile" ||
        kill -s TERM $sleepjob_pid
      } >/dev/null 2>&1 </dev/null &
      ;;
    NetBSD)
      {
        flock -x -w $waitsec "$file"                \
        "$0" "$pid" "$maxlifetime" "$temp_datafile" ||
        kill -s TERM $sleepjob_pid
      } >/dev/null 2>&1 </dev/null &
      ;;
    *)
      echo "Non-supported OS" 1>&3
      exit_trap 3
      ;;
  esac
  #
  # --- return pid of the locking script -----------------------------
  wait $sleepjob_pid >/dev/null 2>&1
  cat "$temp_datafile" | grep -v '[^0-9]'
  #
  # --- finish -------------------------------------------------------
  exit_trap $?
;;


# ===== ROUTINE AS A CHILD ===========================================
'c')
  # This child process must be called with the arguments
  #   $1: PID which this script waits for termination
  #   $2: timeout (secs)
  #   $3: file for telling my pid
  #
  # --- validate the arguments ---------------------------------------
  case $# in 3) :;; *) echo '*** Invalid arguments'   1>&3; exit 10;; esac
  printf '%s\n' "$1" | grep -q '^[0-9]\{1,\}$'
  case $? in 0) :;; *) echo '*** Invalid argument #1' 1>&3; exit 11;; esac
  printf '%s\n' "$2" | grep -q '^[0-9]\{1,\}$'
  case $? in 0) :;; *) echo '*** Invalid argument #2' 1>&3; exit 12;; esac
  [ -f "$3"  ] ||    { echo '*** Invalid argument #3' 1>&3; exit 13; }
  #
  # --- set exiting trap ---------------------------------------------
  exit_trap() {
    trap '' EXIT HUP INT QUIT PIPE ALRM TERM
    kill -s TERM "${timerjob_pid:-}" "${timersleep_pid:-}"
    kill -s TERM "${pollingsleep_pid:-}"
    trap -  EXIT HUP INT QUIT PIPE ALRM TERM
    exit ${1:-0}
  }
  trap 'exit_trap' EXIT HUP INT QUIT PIPE ALRM TERM
  #
  # --- tell my pid to the parent process with the tempfile ($3) -----
  notify_pid=$(tail -c +2 "$3")
  printf $$ > "$3"
  kill -s TERM "$notify_pid"
  #
  # --- set my life time ---------------------------------------------
  case $2 in
    0) :                                                                      ;;
    *) { sleep $2; kill -s ALRM $$ >/dev/null; } &
       timerjob_pid=$!
       timersleep_pid=$(ps -Ao pid,ppid | awk '$2=='$timerjob_pid'{print $1}');;
  esac
  #
  # --- wait for termination of the caller (is not the parent) process
  while :; do
    kill -0 $1 >/dev/null 2>&1
    case $? in 0) :;; *) break;; esac
    sleep 1 &
    pollingsleep_pid=$!
    wait $pollingsleep_pid
  done
  #
  # --- finish -------------------------------------------------------
  exit_trap 0
;; esac
