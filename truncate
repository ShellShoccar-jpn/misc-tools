#!/bin/sh
 
######################################################################
#
# TRUNCATE - The "truncate"-Like Command Also Works on Just a POSIX Environment
#
# USAGE: truncate [--by-myself] [-c] -s [+|-]size[K|k|M|m|G|g|T|t] file ...
#        truncate [--by-myself] [-c] -r rfile file ...
#
#        --by-myself ..... (write as the 1st argument when use)
#                          Not use the "built-in" mktemp command
#                          and always do mktemp by myself but it is
#                          inferior to the built-in in performance
#        -c .............. Do not create files if they do not exist.
#                           The truncate utility does not treat this
#                           as an error.
#        -r <rfile> ...... Truncate or extend files to the length of
#                          the file <rfile>.
#        -s [+|-]<size>[K|k|M|m|G|g|T|t]
#                      ... Truncate or extend files by the <size> value.
#                          When "+" or "-" is written at first, it means
#                          relative, otherwise absolute.
#                          And when the unit suffix is written at last,
#                          the value is multiplied by the unit suffix.
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2020-12-06
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, We are fed up with the side effects which are brought
# about by the major licenses.
#
# The latest version is distributed at the following page.
# https://github.com/ShellShoccar-jpn/misc-tools
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
export PATH="$(command -p getconf PATH 2>/dev/null)${PATH+:}${PATH-}"
case $PATH in :*) PATH=${PATH#?};; esac
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [--by-myself] [-c] -s [+|-]size[K|k|M|m|G|g|T|t] file ...
	          ${0##*/} [--by-myself] [-c] -r rfile file ...
	Options : --by-myself ..... (write as the 1st argument when use)
	                            Not use the "built-in" mktemp command
	                            and always do mktemp by myself but it is
	                            inferior to the built-in in performance
	          -c .............. Do not create files if they do not exist.
	                             The truncate utility does not treat this
	                             as an error.
	          -r <rfile> ...... Truncate or extend files to the length of
	                            the file <rfile>.
	          -s [+|-]<size>[K|k|M|m|G|g|T|t]
	                        ... Truncate or extend files by the <size> value.
	                            When "+" or "-" is written at first, it means
	                            relative, otherwise absolute.
	                            And when the unit suffix is written at last,
	                            the value is multiplied by the unit suffix.
	Version : 2020-12-06 02:48:45 JST
	USAGE
  exit 1
}
warning() {
  ${1+:} false && echo "${0##*/}: $1" 1>&2
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}
exit_trap() {
  set -- ${1:-} $?  # $? is set as $1 if no argument given
  trap '' EXIT HUP INT QUIT PIPE ALRM TERM
  rm -f "${Tempfile:-}"
  trap -  EXIT HUP INT QUIT PIPE ALRM TERM
  exit $1
}

# === Exec the built-in truncate command if OK and exists ============
by_myself=0
case "${1:-}" in 
  '--by-myself')
     shift; by_myself=1
     ;;
  *) export mydir=$(d=${0%/*}/;[ "_$d" = "_$0/" ]||cd "$d";echo "$(pwd)")
     path0=${PATH:-}
     PATH=$(printf  '%s\n' "$path0"                |
            tr      ':' '\n'                       |
            awk     '$0!=ENVIRON["mydir"]{print;}' |
            tr      '\n' ':'                       |
            grep -v '^:$'                          |
            sed     's/:$//'                       )
     CMD_builtin=$(command -v truncate 2>/dev/null || :)
     case "$CMD_builtin" in '') by_myself=1;; esac
     PATH=$path0
     unset mydir
     ;;
esac
case $by_myself in 0) exec "$CMD_builtin" ${1+"$@"}; exit 1;; esac

# === Confirm the required commands exist ============================
# --- 
if   type bc >/dev/null 2>&1                                      ; then
  CMD_CALC='bc'
elif [ "$(expr 9223372036854775806 + 1)" = '9223372036854775807' ]; then
  CMD_CALC='xargs expr'
else
  error_exit 1 'bc command or 64bit-expr command is required'
fi


######################################################################
# Register Functions
######################################################################

# === FUNC: exec the mktemp command if exists ========================
get_attr_and_size0() {
  attr=$1
  size0=$(ls -adl "$attr" 2>/dev/null) || [ ! -e "$attr" ] || {
    attr=''
    size0=''
    return 1
  }
  set -- $size0
  attr=${1:-}
  size0=${5:-0}
  return 0
}

# === FUNC: Make a Temporary File ====================================
# arg   : (none)
# ret   : 0 when succeeded
# stdout: path of the generated temporary file
LFs=$(printf '\\\n_');LFs=${LFs%_}
mktempf0() {
  # --- parameters, etc. ---------------------------------------------
  num_of_digits=16  # Length of Random String
  n=10              # Max Times of Retrying
  chrs='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_'
                    # Available letters
  # --- call built-in mktemp if exists -------------------------------
  type mktemp >/dev/null 2>&1 && {
    mktemp -t tmp.${0##*/}.$$.XXXXXXXXXXXXXXXX
    return $?
  }
  # --- set the temporary directory ----------------------------------
  Dir_tmp=$(set | grep -q ^TMPDIR= | sed 's/^[^=]\{1,\}=//');
  case "$Dir_tmp" in
    '') Dir_tmp='/tmp'      ;;
    /)  Dir_tmp=''          ;;
    *)  Dir_tmp=${Dir_tmp%/};;
  esac
  # --- mktemp loop --------------------------------------------------
  while [ $n -ge 0 ]; do
    # --- Generate Ramdom string -------------------------------------
    # calculate the number of words which required
    nw=$(echo "${num_of_digits}*l(${#chrs})/11.09+1" | # 11.09=ln(65536)
         bc -l                                       |
         sed 's/\..*$//'                             )
    # make a random hexadecimal digit
    if [ -c /dev/urandom ]; then
      hstr=$(dd if=/dev/urandom bs=2 count=$nw 2>/dev/null |
             od -A n -t x2 -v                              |
             tr 'abcdef ' 'ABCDEF\n'                       |
             tr -Cd 0123456789ABCDEF                       )
    else
      hstr=$( (ps -Ao pid,etime,pcpu,vsz; date)         |
             od -t d4 -A n -v                           |
             sed 's/[^0-9]\{1,\}/'"$LFs"'/g'            |
             grep '[0-9]'                               |
             tail -n 42                                 |
             sed 's/.*\(.\{8\}\)$/\1/g'                 |
             awk 'BEGIN{a=-2147483648;}                 #
                       {a+=$1;        }                 #
                  END  {                                #
                    srand(a);                           #
                    for(i=0;i<'$nw';i++){               #
                      printf("%02X",int(rand()*65536)); #
                    }                                   #
                  }'                                    )
    fi
    # make a random string from the hexadecimal digit
    s=$(echo "obase=${#chrs};ibase=16;$hstr"                     |
        bc                                                       |
        tr -d '\\\n'                                             |
        tr ' ' '\n'                                              |
        awk 'BEGIN  {for(i=1;i<'$num_of_digits';i++){print 0;}}  #
             /[0-9]/{print;                                   }' |
        awk 'BEGIN  {ORS="";                                     #
                     s="'"$chrs"'";                              #
                     for(i=0;i<length(s);i++){                   #
                       c[i]=substr(s,i+1,1);                     #
                     }                        }                  #
             /[0-9]/{print c[$0*1];           }'                 |
        tail -c $num_of_digits                                   )
    # --- Making the file path ---------------------------------------
    Path_target="${Dir_tmp}/tmp.${0##*/}.$$.$s"
    # --- Making the file --------------------------------------------
    (set -C; umask 177; : > "$Path_target") 2>/dev/null || {
      [ -f "$Path_target" ] && { n=$((n-1)); continue; }
      n=-1; break;
    }
    break
  done
  # --- print error message when failed to make a file ---------------
  case "$n" in -1) return 1;; esac
  # --- print the path of the file -----------------------------------
  printf '%s\n' "$Path_target"
  # --- return successfully ------------------------------------------
  return 0
}


######################################################################
# Parse Arguments
######################################################################

# === Get the options ================================================
# --- initialize option parameters -----------------------------------
optc=0    # 1 when -c is set
opto=0    # not implemented yet
asize=''  # absolute size which is wanted
dsize=''  # delta-size which is wanted
#
# --- get them -------------------------------------------------------
optmode=''
while :; do
  case $# in 0) break;; esac
  case "$optmode" in
    '') case "$1" in
          -[cors]*)      s=$(printf '%s\n' "$1"                              |
                             awk '{c = "_"; o = "_"; r = "_"; s = "_";       #
                                   for (i=2;i<=length($0);i++) {             #
                                     l = substr($0,i,1);                     #
                                     if      (l == "c") { c = "c";        }  #
                                     else if (l == "o") { o = "o";        }  #
                                     else if (l == "r") { r = "r"; break; }  #
                                     else if (l == "s") { s = "s"; break; }  #
                                     else               { c = "_";           #
                                                          o = "_";           #
                                                          r = "_";           #
                                                          s = "_"; break; }  #
                                   }                                         #
                                   str = substr($0,i+1);                     #
                                   printf("%s%s%s%s/%s",c,o,r,s,str);      }')
                         case "$s" in ____/*) print_usage_and_exit;; esac
                         case "$s" in c???/*) optc=1     ;; esac
                         case "$s" in ?o??/*) opto=1     ;; esac
                         case "$s" in ??r?/*) optmode='r';; esac
                         case "$s" in ???s/*) optmode='s';; esac
                         s=${s#????/}
                         case "$s" in '') shift; continue;; esac              ;;
          --no-create)   optc=1     ; shift; continue                         ;;
          --io-blocks)   opto=1     ; shift; continue                         ;;
          --reference=*) optmode='r'; s=${1#--reference=}                     ;;
          --size=*)      optmode='s'; s=${1#--size=}                          ;;
          -*)            print_usage_and_exit                                 ;;
        esac
        ;;
    *)  s=$1
        ;;
  esac
  case "$optmode" in
    r) case "$s" in /*|./*|../*) file=$s;; *) file="./$s";; esac
       while :; do
         get_attr_and_size0 "$file" || {
           error_exit 1 'Cannot open (Permission denied): '"$s"
         }
         case "$attr" in
           '') # skip when option -c is set
               error_exit 1 'No such file or directory: '"$s"
               ;;
           -*) break
               ;;
           l*) s=$(printf '%s\n' "$file"       |
                   sed 's/\([].\*/[]\)/\\\1/g' |
                   sed 's/^\^/\\^/'            |
                   sed 's/\$$/\\$/'            )
               srcfile=$(file "$file"                              |
                         sed 's/^.\{'"$s"'\}: symbolic link to //' |
                         sed 's/^`\(.*\)'"'"'$/\1/'                )
               case "$srcfile" in
                 /*) file=$srcfile             ;;
                  *) file="${file%/*}/$srcfile";;
               esac
               continue
               ;;
           d*) break
               ;;
            *) error_exit 1 'Not a regular file: '"$file0"
               ;;
         esac
       done
       asize=$size0
       dsize=''
       shift
       optmode=''
       continue
       ;;
    s) printf '%s' "$s"                        |
       awk '/^[0-9]+[KkMmGgTt]?$/    {exit 0;} #
            /^[+-][0-9]+[KkMmGgTt]?$/{exit 1;} #
                                     {exit 2;}'
       case $? in
         0) case "$s" in
              *[0-9]) asize=$s                                          ;;
              *[Kk])  asize=$(echo "${s%?} * 1024"          | $CMD_CALC);;
              *[Mm])  asize=$(echo "${s%?} * 1048576"       | $CMD_CALC);;
              *[Gg])  asize=$(echo "${s%?} * 1073741824"    | $CMD_CALC);;
              *[Tt])  asize=$(echo "${s%?} * 1099511627776" | $CMD_CALC);;
            esac
            dsize=''
            ;;
         1) s=${s#+}
            case "$s" in
              *[0-9]) dsize=$s                                          ;;
              *[Kk])  dsize=$(echo "${s%?} * 1024"          | $CMD_CALC);;
              *[Mm])  dsize=$(echo "${s%?} * 1048576"       | $CMD_CALC);;
              *[Gg])  dsize=$(echo "${s%?} * 1073741824"    | $CMD_CALC);;
              *[Tt])  dsize=$(echo "${s%?} * 1099511627776" | $CMD_CALC);;
            esac
            asize=''
            ;;
         2) error_exit 1 'Invalid size by -s,--size option'
            ;;
       esac
       shift
       optmode=''
       continue
       ;;
  esac
  break
done


######################################################################
# Main Routine
######################################################################

case $# in 0) print_usage_and_exit;; esac
err=0
for file0 in "$@"; do
  case "$file0" in /*|./*|../*) file=$file0;; *) file="./$file0";; esac

  # --- 1) Search the regular file path and the size of that file ----
  while :; do
    get_attr_and_size0 "$file" || {
      warning 'Cannot open (Permission denied): '"$file0"
      continue 2
    }
    case "$attr" in
      '') # skip when option -c is set
          case $optc in 0) break;; 1) continue 2;; esac
          ;;
      -*) break
          ;;
      l*) s=$(printf '%s\n' "$file"       |
              sed 's/\([].\*/[]\)/\\\1/g' |
              sed 's/^\^/\\^/'            |
              sed 's/\$$/\\$/'            )
          srcfile=$(file "$file"                              |
                    sed 's/^.\{'"$s"'\}: symbolic link to //' |
                    sed 's/^`\(.*\)'"'"'$/\1/'                )
          case "$srcfile" in
            /*) file=$srcfile             ;;
             *) file="${file%/*}/$srcfile";;
          esac
          continue
          ;;
      d*) warning 'It is a directory: '"$file0"
          err=1
          continue 2
          ;;
       *) #waring 'Not a regular file: '"$file0"
          #err=1
          continue 2
          ;;
    esac
  done

  # --- 2) Re-calculate $dsize(delta-size) when $asize(absolute size) is set
  case "${asize}:${dsize}" in
    :[0-9-]*) size1=$(echo "$dsize + $size0" | $CMD_CALC)   # when only dsize
              case $size1 in -*) size1=0;; esac          ;;
    [0-9]*:*) size1=$asize                                  # when size exists
              dsize=$(echo "$asize - $size0" | $CMD_CALC);;
           *) error_exit 255 'ERROR!'                    ;; # otherwise (error)
  esac
  # 2-1) Refuse truncating when dsize >= 16GB
  case $(echo "${dsize} - 17179869184" | $CMD_CALC) in
    [0-9]*) warning 'Too large to increase the filesize: '"$file0"
            err=1
            continue
            ;;
  esac

  # --- 3) Truncate or extend ----------------------------------------
  case $dsize in
    -*) # decrease size
        case $size1 in
          0) : > "$file0"
             ;;
          *) case "${Tempfile:-}" in
               '') trap 'exit_trap' EXIT HUP INT QUIT PIPE ALRM TERM
                   Tempfile=$(mktempf0) || {
                     printf '%s: %s: Failed to truncate\n' "${0##*/}" "$file0"
                     err=1
                     continue
                   }
                   ;;
             esac
             dd "if=$file0" count=1 bs=$size1 "of=$Tempfile" 2>/dev/null || {
               printf '%s: %s: Failed to truncate\n' "${0##*/}" "$file0"
               err=1
               continue
             }
             cat "$Tempfile" > "$file0"
             ;;
        esac
        ;;
     0) # same size (do nothing)
        :
        ;;
     *) # increase size
        if [ -c /dev/zero ]; then
          dd if=/dev/zero count=1 bs=$dsize >> "$file0" 2>/dev/null
        else
          yes '' | dd count=1 bs=$dsize 2>/dev/null | tr '\n' '\000' >> "$file0"
        fi
        ;;
  esac
done


######################################################################
# Finish
######################################################################

exit $err
