#!/bin/sh

######################################################################
#
# PUNLOCK - A Unlock Command for "pexlock" and "pshlock"
#
# Usage   : punlock [options] <lockname> [lockname ...]
#           -d <lockdir> ...... the directory for lockfiles.
#                               The lockfile directory will be decided
#                               as the following rule.
#                               1) this option "-d" if specified
#                               2) the environment varriable "PLOCKDIR"
#                                  if specified
#                               3) the current working directory (default)
#           -w <maxwaiting> ... <<for only lockfiles by "pshlock">>
#                               maximum waiting seconds to succeed locking
#                               (-1 means waiting infinitely)
#                               The default value is 10.
# Return  : $0 ==0 ... one or more unlocking were success
#              !=0 ... all failure
#
# Example : See the header comments of "pexlock" and "pshlock"
#
# Notice  : The lockfile is written with rw-rw-rw for sharing.
#           If you want not to share it with others,
#           you have to give the lockdir rwxrwx--- or rwx------ permisson.
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2020-12-06
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, We are fed up with the side effects which are brought
# about by the major licenses.
#
# The latest version is distributed at the following page.
# https://github.com/ShellShoccar-jpn/misc-tools
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0000 # <-- not 0022
export LC_ALL=C
export PATH="$(command -p getconf PATH 2>/dev/null)${PATH+:}${PATH-}"
case $PATH in :*) PATH=${PATH#?};; esac
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [options] <lockname> [lockname ...]
	Options : -d <lockdir> ...... the directory for lockfiles.
	                              The lockfile directory will be decided
	                              as the following rule.
	                              1) this option "-d" if specified
	                              2) the environment varriable "PLOCKDIR"
	                                 if specified
	                              3) the current working directory (default)
	          -w <maxwaiting> ... <<for only lockfiles by "pshlock">>
	                              maximum waiting seconds to succeed locking
	                              (-1 means waiting infinitely)
	                              The default value is 10.
	Return  : \$? ==0 ... one or more unlocking were success
	             !=0 ... all failure
	Example : See the header comments of "pexlock" and "pshlock"
	Notice  : The lockfile is written with rw-rw-rw for sharing.
	          If you want not to share it with others,
	          you have to give the lockdir rwxrwx--- or rwx------ permisson.
	Version : 2020-12-06 02:55:25 JST
	USAGE
  exit 1
}
warning() {
  ${1+:} false && echo "${0##*/}: $1" 1>&2
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}
exit_trap () {
  trap '' EXIT HUP INT QUIT PIPE ALRM TERM
  rm -rf "${File_busy:-}" >/dev/null 2>&1
  trap -  EXIT HUP INT QUIT PIPE ALRM TERM
  case $# in 0) exit $?;; *) exit ${1:-0};; esac
}


######################################################################
# Argument Parsing
######################################################################

# === Set default values =============================================
optd=''
max_waiting_secs=10
max_lifetime_secs=''

# === Parse arguments ================================================
optmode=''
while [ $# -gt 0 ]; do
  case "$optmode" in
    '') case "$1" in
          --)      shift
                   break
                   ;;
          -[hv]|--help|--version)
                   print_usage_and_exit
                   ;;
          -[dwl]*) ret=$(printf '%s\n' "${1#-}"                              |
                         awk '{opt     = substr($0,1,1);                     #
                               opt_str = (length($0)>1) ? substr($0,2) : ""; #
                               printf("%s %s", opt, opt_str);              }')
                   ret1=${ret%% *}
                   ret2=${ret#* }
                   case "$ret1$ret2" in
                     d)  optmode='d'             ;;
                     d*) optd=$ret2              ;;
                     w)  optmode='w'             ;;
                     w*) max_waiting_secs=$ret2  ;;
                     l)  optmode='l'             ;;
                     l*) max_lifetime_secs=$ret2 ;;
                   esac
                   ;;
          -*)      print_usage_and_exit
                   ;;
          *)       break
                   ;;
        esac
        ;;
    d)  optd=$1
        optmode=''
        ;;
    w)  max_waiting_secs=$1
        optmode=''
        ;;
    l)  max_lifetime_secs=$1
        optmode=''
        ;;
  esac
  shift
done

# === Validate arguments =============================================
case $# in 0) print_usage_and_exit;; esac
echo "_$max_waiting_secs"   | grep -Eq '^_-?[0-9]+$' || {
  error_exit 1 'Maximum waiting seconds parameter is invalid'
}
case "$max_lifetime_secs" in
  '') :                                                  ;;
   *) warning 'option "-l" could not use in this command';;
esac
Dir_lock=''
while :; do
  case "$optd"         in '') :;; *) Dir_lock="${optd%/}/"
                                     break                             ;; esac
  case "${PLOCKDIR:-}" in '') :;; *) Dir_lock="${PLOCKDIR%/}/"
                                     break                             ;; esac
  case 'default'       in         *) Dir_lock=$(pwd)
                                     Dir_lock=${Dir_lock%/}
                                     break                             ;; esac
done
case $? in
  [!0]*) error_exit 1 'Failed to make the lockfile directory';;
esac
[ -z "$optd" ] || [ -d "$optd" ] || {
  error_exit 1 'No such directory or permission denied: '"$Dir_lock"
}
case "$Dir_lock" in [!/]*) s=$(pwd);Dir_lock="${s%/}/$Dir_lock";; esac


######################################################################
# Main Routine
######################################################################

trap 'exit_trap' EXIT HUP INT QUIT PIPE ALRM TERM
ppid=$(ps -Ao pid,ppid | awk '$1=='"$$"'{print $2;exit}')
Dir_home=$(pwd);Dir_home=${Dir_home%/}
count_all=0
count_success=0
for lockname in ${1+"$@"}; do
  count_all=$((count_all+1))

  # --- Validate the lockname  ---------------------------------------
  # 0) trim "/" at the end of argument
  lockname=${lockname%/}
  # 1) if the argument is as a sh-lock, separate lock-id from the argument
  memberid=''
  echo "_$lockname" | grep -Eq '^_.+/[0-9]{14}\.[0-9]+\.[0-9]+$' && {
    memberid=${lockname##*/}
    lockname=${lockname%/*}
  }
  # 2) make the argument an absolute filepath and separate it into the
  #    directory path and the lockname
  case "$lockname" in
      '/'*) :                                        ;;    # as a path
     './'*) lockname="${Dir_home%}/${lockname#./}"   ;;    # as a path
    '../'*) lockname="${Dir_home%/*}/${lockname#../}";;    # as a path
       */*) lockname="${Dir_home%}/$lockname"        ;;    # as a path
         *) case "$memberid" in
              '') lockname="$Dir_lock$lockname"          ;; # just a ex-lockname
               *) lockname="$Dir_lock$lockname/$lockname";; # just a sh-lockname
            esac
            ;;
  esac
  Dir_path="${lockname%/*}/"
  lockname="${lockname##*/}"
  # 3) skip if the argument is a sh-lock without member-id
  [ -d "$Dir_path$lockname" ] && [ -z "$memberid" ] && {
    warning "$lockname"': member-id is required to unlock a sh-lockfile'
    continue
  }
  # 4) skip if the argument is one of some reserve names
  case "$lockname" in
    '.border_date_and_time.tmp')
      warning '".border_date_and_time.tmp" is reserved, skipped'
      continue
      ;;
  esac
  printf '%s\n' "$lockname"                              |
  grep -Eq '^\.preshlock\.[0-9]{14}\.[0-9]+\.[0-9]+$' && {
    warning "$lockname: It contains some reserved phrases, skipped"
    continue
  }

  # --- Try to unlock the lockfile as a exclusive-lock ---------------
  rm "$Dir_path$lockname" 2>/dev/null && {
    count_success=$((count_success+1))
    continue
  }

  # --- If failed, then try to unlock it as a shared-lock ------------
  # 0) already unlocked?
  [ -d "$Dir_path$lockname" ] || {
    count_success=$((count_success+1))
    continue
  }
  # 1) trying loop
  if [ $max_waiting_secs -ge 0 ]; then
    try=$((max_waiting_secs+1))
  else
    try=1
  fi
  while [ $try -gt 0 ]; do
    # 1-2) try to create the accesing right token file "busy"
    File_busy="${Dir_path}$lockname/.busy"
    (set -C; echo $ppid > "$File_busy") 2>/dev/null || {
      File_busy=''                                   # retry  if already exists
      [ $max_waiting_secs -ge 0 ] && try=$((try-1))
      case $try in 0) :;; *) sleep 1;; esac
      continue
    }
    # 1-3) remove the member-id directory
    [ -d "${Dir_path}$lockname/$memberid" ] && {
      rmdir "${Dir_path}$lockname/$memberid" || {
        try=-2                                        # exit loop abnormally
        rm -f "$File_busy" 2>/dev/null
        File_busy=''
        break
      }
    }
    # 1-5) if the current number of the locking processes is 0,
    #      remove the sh-lock directory
    n=$(ls -f1 "${Dir_path}$lockname" 2>/dev/null      |
        awk 'BEGIN{n=0}; /^[0-9]/{n++;}; END{print n;}')
    case $n in
      0) s=${Dir_path%/}; s="${s%/*}/.pshlock.${s##*/}.$$"
         mv "${Dir_path%/}" "$s" || { try=-3; break; }
         rm -rf "$s"
         File_busy=''
         break
         ;;
    esac
    # 1-6) finish the loop successfully
    rm -f "$File_busy" 2>/dev/null
    File_busy=''
    break
  done
  # 2) $try > 0 : success and print the path of the generated lockfile
  #         ==0 : now fully locked
  #         < 0 : abnormally exit
  #    otherwise, it means some error happened
  case $try in
    [1-9]*) :
            ;;
         0) warning "$lockname"': timeout, try again later'        ; continue
            ;;
        -1) warning "$lockname"': timeout, the lock-dir is broken!'; continue
            ;;
        -2) warning "$memberid"': Cannot remove the member'        ; continue
            ;;
        -3) warning "$lockname"': Cannot remove the lock-dir'      ; continue
            ;;
        -*) warning "$lockname"': unexpedter error!'               ; continue
            ;;
  esac

  count_success=$((count_success+1))
done


######################################################################
# Finish
######################################################################

# === Return 1 if all locking failed =================================
case "$count_success:$count_all" in
  0:[!0]*) exit_trap 1;;
        *) exit_trap 0;;
esac
