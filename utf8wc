#!/bin/sh

######################################################################
#
# UTF8WC - A Halfwidth Unit Ruler for Strings Contain UTF-8 Characters
#
# Usage  : utf8wc [-flv] <file> [file ...]
# Options: -f ... Count text in every file (default)
#                 * The output in this mode is the following.
#                     <length>
#                 * This option is exclusive with the "-l" option.
#          -l ... Count text in every line
#                 * The output in this mode is the following.
#                     <length> <original text string>
#                 * This option is exclusive with the "-f" option.
#          -v ... Verbose
#                 * The length in the first column will be extended
#                   the following three,
#                     <bytes> <letters> <length>
#                       <bytes> ..... number of bytes
#                       <letters> ... number of letters
#                       <length> .... length in the halfwidth unit
# Return : stdout ... Length of the given string by halfwidth unit every
#                   file a line
#
# === Example ===
# In case of UTF-8,
# 1. This example returns 2.
#    > echo "あ"      | utf8wc
# 2. This example returns 1.
#    > echo "ｱ"       | utf8wc
# 3. This example returns 7.
#    > echo "ﾐﾄﾞﾘ1号" | utf8wc
# 4. This example returns 7.
#    $ printf "あいうえお\nﾐﾄﾞﾘ1号\n" | utf8wc -l
#    10 あいうえお
#    7 ﾐﾄﾞﾘ1号
#    $ 
#
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2023-11-10
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, We are fed up with the side effects which are brought
# about by the major licenses.
#
# The latest version is distributed at the following page.
# https://github.com/ShellShoccar-jpn/misc-tools
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
export PATH="$(command -p getconf PATH 2>/dev/null)${PATH+:}${PATH-}"
case $PATH in :*) PATH=${PATH#?};; esac
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage ========================
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [-flv] <file> [file...]
	Options : -f ... Count text in every file (default)
	                 * The output in this mode is the following.
	                     <length>
	                 * This option is exclusive with the "-l" option.
	          -l ... Count text in every line
	                 * The output in this mode is the following.
	                     <length> <original text string>
	                 * This option is exclusive with the "-f" option.
	          -v ... Verbose
	                 * The length in the first column will be extended
	                   the following three.
	                     <bytes> <letters> <length>
	                       <bytes> ..... number of bytes
	                       <letters> ... number of letters
	                       <length> .... length in the halfwidth unit
	Version : 2023-11-10 17:51:43 JST
	USAGE
  exit 1
}


######################################################################
# Argument Parsing
######################################################################

# === Set default values =============================================
mode='f'
optv=0

# === Print usage and exit if one of the help options is set =========
optmode=''
while :; do
  case $# in 0) break;; esac
  case "$optmode" in
    '') case "$1" in
          -)       case $# in 1) break;; esac
                   ;;
          -[flv]*)
                     s=$(printf '%s\n' "${1#-}"                           |
                         awk '{opt = "_"; err="";                         #
                               l = length($0);                            #
                               for (n=1;n<=l;n++) {                       #
                                 c = substr($0, n, 1);                    #
                                 if      (c=="f") { gsub(/fl/,"",opt);    #
                                                    opt = opt "f";      } #
                                 else if (c=="l") { gsub(/fl/,"",opt);    #
                                                    opt = opt "l";      } #
                                 else if (c=="v") { gsub(/v/ ,"",opt);    #
                                                    opt = opt "v";      } #
                                 else             { err = "!";          } #
                               }                                          #
                               arg = (n<l) ? substr($0,n+1) : "";         #
                               printf("%s%s %s",err,opt,arg);           }')
                     arg=${s#* }
                     s=${s%% *}
                     case "$s" in '!'*) print_usage_and_exit;; esac
                     case "$s" in  *f*) mode='f'            ;; esac
                     case "$s" in  *l*) mode='l'            ;; esac
                     case "$s" in  *v*) optv=1              ;; esac
                     shift;
                     case "$arg" in '') continue;; esac
                     ;;
          --file)    mode='f'
                     shift
                     continue
                     ;;
          --line)    mode='l'
                     shift
                     continue
                     ;;
          --verbose) optv=1
                     shift
                     continue
                     ;;
          --)        shift
                     break
                     ;;
          -*)        print_usage_and_exit
                     ;;
          *)         break
                     ;;
        esac
        ;;
    *)  arg=$1
        shift
        ;;
  esac
  case "$optmode" in
   #X) optX=$arg                                       ;;
    *) error_exit 1 'There is a BUG is in this program';;
  esac
  optmode=''
done

# === Set "-" into the 1st argument if no argument is given ==========
case $# in 0) set -- -;; esac


######################################################################
# Main
######################################################################

# === whole text count mode ==========================================
case $mode in 'f')

ret=0
for file in "$@"; do
  awk -v optv=$optv '
       BEGIN {
         RS           = "\n";
         fileno       =    0;
         numofbytes   =    0;
         numofletters =    0;
         numoflength  =    0;

         while (getline line) {
           if (FNR==1) {
             fileno++;
             if (NR>1) {print numoflength;numoflength=0;}
             catchup_fileno();
           } else {
             numofbytes++  ;
             numofletters++;
             numoflength++ ;
           }
           s = utf8strlen(line);
           if (match(s,/[[:blank:]][0-9]+[[:blank:]]/)) {
             numofbytes   += substr(s,1       ,RSTART -1)*1;
             numofletters += substr(s,RSTART+1,RLENGTH-2)*1;
             numoflength  += substr(s,RSTART+RLENGTH    )*1;
           }
         }

       }
       END {
         if(NR>0){ if (optv==0) {print numoflength;
                   } else       {print numofbytes,numofletters,numoflength;} }
         catchup_fileno();
       }

       # catch up fileno because files which is 0 byte will be skipped
       function catchup_fileno() {
         while (1) {
           if (fileno      >=ARGC    ) {break;}
           if (ARGV[fileno]==FILENAME) {break;}
           if (optv==0) {print 0;} else {print 0,0,0;}
           fileno++;
         }
       }

       # strlen for UTF-8 (main)
       function utf8strlen(str, byt,len,num,i,l1,l2,l3) {
         byt = length(str);
         len = 0;
         num = 0;
         for (i = 1; i <= byt; i++) {
           len++;
           num++;
           l1=substr(str, i, 1);
           if        (l1 =="\010") {len-=2;continue;
           } else if (l1 < "\200") {       continue;
           } else if (l1 < "\300") {len--; continue;
           } else if (l1 < "\340") {i++;
           } else if (l1 < "\360") {
             if (l1 == "\357") {
               l2 = substr(str, i+1, 1);
               if (l2 == "\275") {
                 l3 = substr(str, i+2, 1);
                 if ((l3 >= "\240") && (l3 < "\300")) {len--;}
               } else if (l2 == "\276") {
                 l3 = substr(str, i+2, 1);
                 if ((l3 >= "\200") && (l3 < "\240")) {len--;}
               }
             }
             i += 2;
           } else if (l1 < "\370") {i += 3;
           } else if (l1 < "\374") {i += 4;
           } else if (l1 < "\376") {i += 5;
           } else                  {len-- ; continue;}
           len++;
         }
         return byt " " num " " len;
       }' "$file" 2>/dev/null
  ret=$?
  case $ret in
    0) : ;;
    *)
    echo "${0##*/}: Cannot open the file: $file" 1>&2
  esac
done

# === ever line text count mode ======================================
;; 'l') 

ret=0
for file in "$@"; do
  awk -v optv=$optv '
       # counting
       optv==0{ s=utf8strlen($0);
                sub(/^[0-9]+[[:blank:]]+[0-9]+[[:blank:]]+/,"",s);
                print s             ,$0; next; }
       optv >0{ print utf8strlen($0),$0; next; }

       # strlen for UTF-8 (main)
       function utf8strlen(str, byt,len,num,i,l1,l2,l3) {
         byt = length(str);
         len = 0;
         num = 0;
         for (i = 1; i <= byt; i++) {
           len++;
           num++;
           l1=substr(str, i, 1);
           if        (l1 =="\010") {len-=2;continue;
           } else if (l1 < "\200") {       continue;
           } else if (l1 < "\300") {len--; continue;
           } else if (l1 < "\340") {i++;
           } else if (l1 < "\360") {
             if (l1 == "\357") {
               l2 = substr(str, i+1, 1);
               if (l2 == "\275") {
                 l3 = substr(str, i+2, 1);
                 if ((l3 >= "\240") && (l3 < "\300")) {len--;}
               } else if (l2 == "\276") {
                 l3 = substr(str, i+2, 1);
                 if ((l3 >= "\200") && (l3 < "\240")) {len--;}
               }
             }
             i += 2;
           } else if (l1 < "\370") {i += 3;
           } else if (l1 < "\374") {i += 4;
           } else if (l1 < "\376") {i += 5;
           } else                  {len-- ; continue;}
           len++;
         }
         return byt " " num " " len;
       }' "$file" 2>/dev/null
  ret=$?
  case $ret in
    0) : ;;
    *)
    echo "${0##*/}: Cannot open the file: $file" 1>&2
  esac
done

;; esac


######################################################################
# Finish
######################################################################

exit $ret
