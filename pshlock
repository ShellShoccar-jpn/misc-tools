#!/bin/sh

######################################################################
#
# PSHLOCK - A Shared Lock (and Semaphore) Command Within POSIX
#
# Usage   : pshlock [options] <lockname> [lockname ...]
#           -n <maxsharing> ... the maximum number of sharing lock
#                               This option is for using as a semaphore.
#                               The default value is -1.
#                               (-1 means infinity that is sharing lock)
#           -d <lockdir> ...... the directory for lockfiles.
#                               The lockfile directory will be decided
#                               as the following rule.
#                               1) this option "-d" if specified
#                               2) the environment varriable "PLOCKDIR"
#                                  if specified
#                               3) if the environment varriable "TMPDIR"
#                                  specified, "$TMPDIR/plock.<username>"
#                               4) "/tmp/plock.<username>" (default)
#           -w <maxwaiting> ... maximum waiting seconds to succeed locking
#                               (-1 means waiting infinitely)
#                               The default value is 10.
# Return  : $?     ==0 ... one or more locking were success
#                  !=0 ... all failure
#           stdout ....... generated path of the lock-id
#
# Example : lockid=$(pshlock -n 5 -d /tmp/plock -w 10 foo) || exit 1 #do
#              :                                                     #sh-lock
#           (do something requires shared lock among up to 5 processes)
#              :
#           touch -c "$lockid" # extend lifetime if you want
#              :               # (but it needs to remain SUFFICIENT LIFETIME)
#           punlock "$lockid"  # release the lock
#
# Notice  : The lockfile is written with rw-rw-rw for sharing.
#           If you want not to share it with others,
#           you have to give the lockdir rwxrwx--- or rwx------ permisson.
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2020-12-06
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, We are fed up with the side effects which are brought
# about by the major licenses.
#
# The latest version is distributed at the following page.
# https://github.com/ShellShoccar-jpn/misc-tools
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0000 # <-- not 0022
export LC_ALL=C
export PATH="$(command -p getconf PATH 2>/dev/null)${PATH+:}${PATH-}"
case $PATH in :*) PATH=${PATH#?};; esac
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [options] <lockname> [lockname ...]
	Options : -n <maxsharing> ... the maximum number of sharing lock
	                              This option is for using as a semaphore.
	                              The default value is -1.
	                              (-1 means infinity that is sharing lock)
	          -d <lockdir> ...... the directory for lockfiles.
	                              The lockfile directory will be decided
	                              as the following rule.
	                              1) this option "-d" if specified
	                              2) the environment varriable "PLOCKDIR"
	                                 if specified
	                              3) if the environment varriable "TMPDIR"
	                                 specified, "\$TMPDIR/plock.<username>"
	                              4) "/tmp/plock.<username>" (default)
	          -w <maxwaiting> ... maximum waiting seconds to succeed locking
	                              (-1 means waiting infinitely)
	                              The default value is 10.
	Return  : \$?     ==0 ... one or more locking were success
	                 !=0 ... all failure
	          stdout ....... generated path of the lock-id
	Example : lockid=\$(pshlock -n 5 -d /tmp/plock -w 10 foo) || exit 1 #<do
	             :                                                     # sh-lock
	          (do something requires shared lock among up to 5 processes)
	             :
	          touch -c "\$lockid" # extend lifetime if you want
	             :               # (but it needs to remain SUFFICIENT LIFETIME)
	          punlock "\$lockid"  # release the lock
	Notice  : The lockfile is written with rw-rw-rw for sharing.
	          If you want not to share it with others,
	          you have to give the lockdir rwxrwx--- or rwx------ permisson.
	Version : 2020-12-06 02:54:48 JST
	USAGE
  exit 1
}
warning() {
  ${1+:} false && echo "${0##*/}: $1" 1>&2
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}
exit_trap () {
  trap '' EXIT HUP INT QUIT PIPE ALRM TERM
  rm -rf "${Dir_prelk:-}" "${File_busy:-}" >/dev/null 2>&1
  i=$?
  trap -  EXIT HUP INT QUIT PIPE ALRM TERM
  case $# in 0) exit $i;; *) exit ${1:-0};; esac
}


######################################################################
# Argument Parsing
######################################################################

# === Set default values =============================================
max_num_of_sharing=-1
optd=''
max_waiting_secs=10
max_lifetime_secs=''

# === Parse arguments ================================================
optmode=''
while [ $# -gt 0 ]; do
  case "$optmode" in
    '') case "$1" in
          --)       shift
                    break
                    ;;
          -[hv]|--help|--version)
                    print_usage_and_exit
                    ;;
          -[ndwl]*) ret=$(printf '%s\n' "${1#-}"                              |
                          awk '{opt     = substr($0,1,1);                     #
                                opt_str = (length($0)>1) ? substr($0,2) : ""; #
                                printf("%s %s", opt, opt_str);              }')
                    ret1=${ret%% *}
                    ret2=${ret#* }
                    case "$ret1$ret2" in
                      n)  optmode='n'             ;;
                      n*) max_num_of_sharing=$ret2;;
                      d)  optmode='d'             ;;
                      d*) optd=$ret2              ;;
                      w)  optmode='w'             ;;
                      w*) max_waiting_secs=$ret2  ;;
                      l)  optmode='l'             ;;
                      l*) max_lifetime_secs=$ret2 ;;
                    esac
                    ;;
          -*)       print_usage_and_exit
                    ;;
          *)        break
                    ;;
        esac
        ;;
    n)  max_num_of_sharing=$1
        optmode=''
        ;;
    d)  optd=$1
        optmode=''
        ;;
    w)  max_waiting_secs=$1
        optmode=''
        ;;
    l)  max_lifetime_secs=$1
        optmode=''
        ;;
  esac
  shift
done

# === Validate arguments =============================================
case $# in 0) print_usage_and_exit;; esac
echo "_$max_num_of_sharing" | grep -Eq '^_-?[0-9]+$' || {
  error_exit 1 'Maximum number of sharing parameter is invalid'
}
echo "_$max_waiting_secs"   | grep -Eq '^_-?[0-9]+$' || {
  error_exit 1 'Maximum waiting seconds parameter is invalid'
}
case "$max_lifetime_secs" in
  '') :                                                  ;;
   *) warning 'option "-l" could not use in this command';;
esac
Dir_lock=''
while :; do
  case "$optd"         in '') :;; *) Dir_lock="${optd%/}/"
                                     break                             ;; esac
  case "${PLOCKDIR:-}" in '') :;; *) Dir_lock="${PLOCKDIR%/}/"
                                     break                             ;; esac
  case "${TMPDIR:-}"   in '') :;; *) Dir_lock="${TMPDIR%/}/plock.$(id -un)/"
                                     mkdir -p "$Dir_lock" 2>/dev/null
                                     break                             ;; esac
  case 'default'       in         *) Dir_lock="/tmp/plock.$(id -un)/"
                                     mkdir -p "$Dir_lock" 2>/dev/null
                                     break                             ;; esac
done
case $? in
  [!0]*) error_exit 1 'Failed to make the lockfile directory';;
esac
[ -z "$optd" ] || [ -d "$optd" ] || {
  error_exit 1 'No such directory or permission denied: '"$Dir_lock"
}
case "$Dir_lock" in [!/]*) s=$(pwd);Dir_lock="${s%/}/$Dir_lock";; esac


######################################################################
# Main Routine
######################################################################

trap 'exit_trap' EXIT HUP INT QUIT PIPE ALRM TERM
ppid=$(ps -Ao pid,ppid | awk '$1=='"$$"'{print $2;exit}')
count_all=0
count_success=0
for lockname in ${1+"$@"}; do
  count_all=$((count_all+1))

  # --- Validate the lockname  ---------------------------------------
  case "$lockname" in '.border_date_and_time.tmp')
    warning '".border_date_and_time.tmp" is reserved, skipped'
    continue
    ;;
  esac
  echo "_$lockname" | grep -q '[/:]' && {
    warning "$lockname"': Neither "/" nor ":" can be used in lockname, skipped'
    continue
  }
  echo "_$lockname" | grep -Eq '^_\.preshlock\.[0-9]{14}\.[0-9]+\.[0-9]+$' && {
    warning "$lockname: '.preshlock...' is reserved, skip"
    continue
  }

  # --- Prepare the pre-lock directory -------------------------------
  # 1) decide a lock-procid(yyyymmddhhmmss.uniqid.pid)
  s=$(ps -o pid,ppid | awk '$2=='"$$"'{print $1;exit}')
  memberid="$(date '+%Y%m%d%H%M%S').${s}.$ppid"
  # 2) make the pre-lock directory and the 1st member directory
  #    - A "pre-lock" directory has to have a "2-layered-lockname",
  #      like "<Dir_lock>/<pre-lock_dir}>/<LOCKNAME>/<LOCKNAME>"
  Dir_prelk="${Dir_lock}.preshlock.$memberid"
  mkdir -p "$Dir_prelk/$lockname/$lockname/$memberid"
  case $? in [!0]*)
    warning "$lockname"': Failed to make a pre-lock dir'
    continue
    ;;
  esac

  # --- Try to set shared-lock ---------------------------------------
  # 1) trying loop
  if [ $max_waiting_secs -ge 0 ]; then
    try=$((max_waiting_secs+1))
  else
    try=1
  fi
  while [ $try -gt 0 ]; do
    # 1-1) try "mv" command to change the pre-lock directory to an authentic one
    cd "$Dir_lock$lockname/$lockname" 2>/dev/null || {
      touch -c "$Dir_prelk/$lockname/$lockname/$memberid"
      mv "$Dir_prelk/$lockname" "$Dir_lock$lockname" 2>/dev/null || {
        [ $max_waiting_secs -ge 0 ] && try=$((try-1)) # retry  if failed  to mv
        case $try in 0) :;; *) sleep 1;; esac
        continue
      }
      break                                           # finish if succeed to mv
    }
    # 1-2) If couldn't do the change, then I'd try to create the member file.
    #      For the purpose, try to create the editing token ".edit" at first
    File_busy="$Dir_lock$lockname/$lockname/.busy"
    (set -C; echo $ppid > "$File_busy") 2>/dev/null || {
      File_busy=''                                    # retry  if already exists
      [ $max_waiting_secs -ge 0 ] && try=$((try-1))
      case $try in 0) :;; *) sleep 1;; esac
      continue
    }
    # 1-3) check the current number of the locking processes
    n=$(ls -f1 2>/dev/null | awk 'BEGIN{n=0}; /^[0-9]/{n++;}; END{print n;}')
    [ $max_num_of_sharing -lt 0 ] || [ $n -lt $max_num_of_sharing ] || {
      rm -f "$File_busy" 2>/dev/null                  # retry  if reached limit
      File_busy=''
      [ $max_waiting_secs -ge 0 ] && try=$((try-1))
      case $try in 0) :;; *) sleep 1;; esac
      continue
    }
    # 1-4) create the member file
    s=$(ps -o pid,ppid | awk '$2=='"$$"'{print $1;exit}')
    memberid="$(date '+%Y%m%d%H%M%S').${s}.$ppid"
    mkdir "$memberid" || {
      try=-1                                          # exit loop abnormally
      rm -f "$File_busy" 2>/dev/null
      File_busy=''
      break
    }
    # 1-5) finish the loop successfully
    rm -f "$File_busy" 2>/dev/null
    File_busy=''
    break
  done
  # 2) $try > 0 : success and print the path of the generated lockfile
  #         ==0 : now fully locked
  #         < 0 : abnormally exit
  #    otherwise, it means some error happened
  err=0
  case $try in
    [1-9]*) printf '%s%s/%s/%s\n'                                           \
                   "$Dir_lock" "${lockname}" "${lockname}" "$memberid"
            ;;
         0) warning "$lockname"': timeout, try again later'
            err=1
            ;;
        -1) warning "$lockname"': timeout, the lock-dir is broken!'
            err=1
            ;;
        -*) warning "$lockname"': unexpedter error!'
            err=1
            ;;
  esac

  # --- Remove the pre-lock directory --------------------------------
  rm -rf "${Dir_prelk:-}" >/dev/null 2>&1
  Dir_prelk=''

  case $err in 0) count_success=$((count_success+1));; esac
done


######################################################################
# Finish
######################################################################

# === Return 1 if all locking failed =================================
case "$count_success:$count_all" in
  0:[!0]*) exit_trap 1;;
        *) exit_trap 0;;
esac
