#!/bin/sh

######################################################################
#
# UTF8WC - A Halfwidth Unit Ruler for Strings Contain UTF-8 Characters
#
# USAGE: utf8wc <file> [file ...]
# RET  : stdout ... Length of the given string by halfwidth unit every
#                   file a line
#
# === Example ===
# In case of UTF-8,
# 1. This example returns 2.
#    > echo "あ"      | utf8wc
# 2. This example returns 1.
#    > echo "ｱ"       | utf8wc
# 3. This example returns 7.
#    > echo "ﾐﾄﾞﾘ1号" | utf8wc
#
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2020-05-06
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, We are fed up with the side effects which are brought
# about by the major licenses.
#
# The latest version is distributed at the following page.
# https://github.com/ShellShoccar-jpn/misc-tools
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
export PATH="$(command -p getconf PATH 2>/dev/null)${PATH+:}${PATH-}"
case $PATH in :*) PATH=${PATH#?};; esac
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage ========================
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} <file> [file...]
	Version : 2020-05-06 22:42:19 JST
	USAGE
  exit 1
}


######################################################################
# Argument Parsing
######################################################################

# === Print usage and exit if one of the help options is set =========
case "$# ${1:-}" in
  '1 -h'|'1 --help'|'1 --version') print_usage_and_exit;;
esac

# === Set "-" into the 1st argument if no argument is given ==========
case $# in 0) set -- -;; esac


######################################################################
# Main
######################################################################

ret=0
for file in "$@"; do
  awk 'BEGIN {
         RS           = "\n";
         fileno       =    0;
         numofletters =    0;

         while (getline line) {
           if (FNR==1) {
             fileno++;
             if (NR>1) {print numofletters;numofletters=0;}
             catchup_fileno();
           } else {
             numofletters++;
           }
           numofletters += utf8strlen(line);
         }

       }
       END {
         if(NR>0){print numofletters;}
         catchup_fileno();
       }

       # catch up fileno because files which is 0 byte will be skipped
       function catchup_fileno() {
         while (1) {
           if (fileno      >=ARGC    ) {break;}
           if (ARGV[fileno]==FILENAME) {break;}
           print 0;
           fileno++;
         }
       }

       # strlen for UTF-8 (main)
       function utf8strlen(str, len,i,l1,l2,l3) {
         len = 0;
         for (i = 1; i <= length(str); i++) {
           len++;
           l1=substr(str, i, 1);
           if        (l1 =="\010") {len-=2;continue;
           } else if (l1 < "\200") {       continue;
           } else if (l1 < "\300") {len--; continue;
           } else if (l1 < "\340") {i++;
           } else if (l1 < "\360") {
             if (l1 == "\357") {
               l2 = substr(str, i+1, 1);
               if (l2 == "\275") {
                 l3 = substr(str, i+2, 1);
                 if ((l3 >= "\240") && (l3 < "\300")) {len--;}
               } else if (l2 == "\276") {
                 l3 = substr(str, i+2, 1);
                 if ((l3 >= "\200") && (l3 < "\240")) {len--;}
               }
             }
             i += 2;
           } else if (l1 < "\370") {i += 3;
           } else if (l1 < "\374") {i += 4;
           } else if (l1 < "\376") {i += 5;
           } else                  {len-- ; continue;}
           len++;
         }
         return len;
       }' "$file" 2>/dev/null
  case $? in
    0) : ;;
    *)
    echo "${0##*/}: Cannot open the file: $file" 1>&2
    ret=1
  esac
done


######################################################################
# Finish
######################################################################

exit $ret
