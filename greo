#!/bin/sh

######################################################################
#
# GREO - "Global Regular Expression and Overwrite"
#
# USAGE: greo [options] regexp replacement file#1 [file#2...]
# ARGS : regexp, replacement
#            These are the 1st and 2nd arguments on s/1/2/g.
#            Available meta-chrs. set as regular expression are
#            Basic Regular Expression, you can see on sed manual.
#            However, you do not have to escape "/" in the strings.
#        file#n
#            A file to overwrite (To avoid misunderstanding, you have to
#            use "./-" instead of "-" if "-" means not STDIN but a regular
#            file)
# OPTS : -E, --extended-regexp
#            Regard the arguments "regexp" as extended regular expression
#            (ERE) instead of a basic one (BRE). But you cannot use the
#            option when an ERE supported sed command unavailable.
#        -F, --fixed-strings (compatible with the same options of grep)
#            Regard both arguments ("regexp", "replacement") as
#            not regexp strings but simple string
#        -R, -r, --recursive (compatible with the same options of grep)
#            Read all files under each directory, recursively
#        -p, --perform, --start
#            Do GREO actually, if you run this command without the
#            options, it will be work as rehearsal mode
#        -t, --times
#            Preserve modification times
#        --quick-overwrite
#            Replace the file(s) without tempfile (only for professional)
#            * Quickly overwriting but permission, owner/group, link, ACL
#              information will be reset
#        --  Finish recognizing the following arguments as options
#
# === Example ===
# 1. Replace all places of the word "typo" with "type" in the files on the
#    current dir.
#      $ greo -p 'typo' 'type' *
#
# 2. Replace the date written in comment into today (2017-11-18) in all of the
#    files which has modified within 24 hours in "src" directory recursively.
#      $ find './src' -type f -mtime -1 |
#      > xargs greo -p '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}' '2017-11-18'
#    * You can send the list of filenames to the greo STDIN instead of xargs.
#      It means the word "xargs" is allowed for abridgement when using greo.
#
# 3. I want to replace all places of string "-R" into "-r", but the strings of
#    which start by "-" will be misunderstood as an option. How should I type
#    for?
#      $ greo -p -- '-R' '-r' *
#
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2020-12-06
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, We are fed up with the side effects which are brought
# about by the major licenses.
#
# The latest version is distributed at the following page.
# https://github.com/ShellShoccar-jpn/misc-tools
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
export PATH="$(command -p getconf PATH 2>/dev/null)${PATH+:}${PATH-}"
case $PATH in :*) PATH=${PATH#?};; esac
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [options] regexp(BRE) replacement file#1 [file#2...]
	Args    : regexp(BRE), replacement
	              These are the 1st and 2nd arguments of s/1/2/g.
	              Available meta-chr. set as regular expression is
	              Basic Regular Expression, you can see on sed manual.
	              However, you do not have to escape "/" in the strings.
	          file#n
	              A file to overwrite (To avoid misunderstanding, you have to
	              use "./-" instead of "-" if "-" means not STDIN but a regular
	              file)
	Options : -E, --extended-regexp
	              Regard the arguments "regexp" as extended regular expression
	              (ERE) instead of a basic one (BRE). But you cannot use the
	              option when an ERE supported sed command unavailable.
	          -F, --fixed-strings (compatible with the same options of grep)
	              Regard both arguments ("regexp", "replacement") as
	              not regexp strings but simple string
	          -R, -r, --recursive (compatible with the same options of grep)
	              Read all files under each directory, recursively
	          -p, --perform, --start
	              Do GREO actually, if you run this command without the
	              options, it will be work as rehearsal mode
	          -t, --times
	              Preserve modification times
	          --quick-overwrite
	              Replace the file(s) without tempfile (only for professional)
	              * Quickly overwriting but permission, owner/group, link, ACL
	                information will be reset
	          --  Finish recognizing the following arguments as options
	Version : 2020-12-06 02:56:02 JST
	          (POSIX Bourne Shell/POSIX commands)
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}
exit_trap() {
  set -- ${1:-} $?  # $? is set as $1 if no argument given
  trap '' EXIT HUP INT QUIT PIPE ALRM TERM
  rm -f "${Tempfile:-}"
  trap -  EXIT HUP INT QUIT PIPE ALRM TERM
  exit $1
}

# === Define misc variables ==========================================
LF=$(printf '\\\n_');LF=${LF%_} # <0x0a>

# === FUNC : the alternative of the "mktemp -t" ======================
mktempf0() {
  # --- parameters, etc. ---------------------------------------------
  num_of_digits=16  # Length of Random String
  n=10              # Max Times of Retrying
  chrs='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_'
                    # Available letters
  # --- call built-in mktemp if exists -------------------------------
  type mktemp >/dev/null 2>&1 && {
    mktemp -t tmp.${0##*/}.$$.XXXXXXXXXXXXXXXX
    return $?
  }
  # --- set the temporary directory ----------------------------------
  Dir_tmp=$(set | grep -q ^TMPDIR= | sed 's/^[^=]\{1,\}=//');
  case "$Dir_tmp" in
    '') Dir_tmp='/tmp'      ;;
    /)  Dir_tmp=''          ;;
    *)  Dir_tmp=${Dir_tmp%/};;
  esac
  # --- mktemp loop --------------------------------------------------
  while [ $n -ge 0 ]; do
    # --- Generate Ramdom string -------------------------------------
    # calculate the number of words which required
    nw=$(echo "${num_of_digits}*l(${#chrs})/11.09+1" | # 11.09=ln(65536)
         bc -l                                       |
         sed 's/\..*$//'                             )
    # make a random hexadecimal digit
    if [ -c /dev/urandom ]; then
      hstr=$(dd if=/dev/urandom bs=2 count=$nw 2>/dev/null |
             od -A n -t x2 -v                              |
             tr 'abcdef ' 'ABCDEF\n'                       |
             tr -Cd 0123456789ABCDEF                       )
    else
      hstr=$( (ps -Ao pid,etime,pcpu,vsz; date)         |
             od -t d4 -A n -v                           |
             sed 's/[^0-9]\{1,\}/'"\\$LFs"'/g'          |
             grep '[0-9]'                               |
             tail -n 42                                 |
             sed 's/.*\(.\{8\}\)$/\1/g'                 |
             awk 'BEGIN{a=-2147483648;}                 #
                       {a+=$1;        }                 #
                  END  {                                #
                    srand(a);                           #
                    for(i=0;i<'$nw';i++){               #
                      printf("%02X",int(rand()*65536)); #
                    }                                   #
                  }'                                    )
    fi
    # make a random string from the hexadecimal digit
    s=$(echo "obase=${#chrs};ibase=16;$hstr"                     |
        bc                                                       |
        tr -d '\\\n'                                             |
        tr ' ' '\n'                                              |
        awk 'BEGIN  {for(i=1;i<'$num_of_digits';i++){print 0;}}  #
             /[0-9]/{print;                                   }' |
        awk 'BEGIN  {ORS="";                                     #
                     s="'"$chrs"'";                              #
                     for(i=0;i<length(s);i++){                   #
                       c[i]=substr(s,i+1,1);                     #
                     }                        }                  #
             /[0-9]/{print c[$0*1];           }'                 |
        tail -c $num_of_digits                                   )
    # --- Making the file path ---------------------------------------
    Path_target="${Dir_tmp}/tmp.${0##*/}.$$.$s"
    # --- Making the file --------------------------------------------
    (set -C; umask 177; : > "$Path_target") 2>/dev/null || {
      [ -f "$Path_target" ] && { n=$((n-1)); continue; }
      n=-1; break;
    }
    break
  done
  # --- print error message when failed to make a file ---------------
  case "$n" in -1) return 1;; esac
  # --- print the path of the file -----------------------------------
  printf '%s\n' "$Path_target"
  # --- return successfully ------------------------------------------
  return 0
}


######################################################################
# Argument Parsing
######################################################################

# === Set default values =============================================
optF=0
optE=0
optR=0
optp=0
optq=0
optt=0
optHH=''
case "${0##*/}" in 'egreo') optE=1;; 'fgreo') optF=1;; esac

# === Parse arguments (except files) =================================
optmode=''
while :; do
  case $# in 0) break;; esac
  case "$optmode" in
    '') case "$1" in
          -)       case $# in 1) break;; esac
                   ;;
          -[EFpRrt]*)
                     s=$(printf '%s\n' "${1#-}"                           |
                         awk '{opt = "_"; err="";                         #
                               l = length($0);                            #
                               for (n=1;n<=l;n++) {                       #
                                 c = substr($0, n, 1);                    #
                                 if      (c=="E") { opt = opt "E";      } #
                                 else if (c=="F") { opt = opt "F";      } #
                                 else if (c=="p") { opt = opt "p";      } #
                                 else if (c=="R") { opt = opt "R";      } #
                                 else if (c=="r") { opt = opt "R";      } #
                                 else if (c=="t") { opt = opt "t";      } #
                                #else if (c=="X") { opt = opt "X";break;} #
                                 else             { err = "!";          } #
                               }                                          #
                               arg = (n<l) ? substr($0,n+1) : "";         #
                               printf("%s%s %s",err,opt,arg);           }')
                     arg=${s#* }
                     s=${s%% *}
                     case "$s" in '!'*) print_usage_and_exit;; esac
                     case "$s" in  *E*) optE=1              ;; esac
                     case "$s" in  *F*) optF=1              ;; esac
                     case "$s" in  *p*) optp=1              ;; esac
                     case "$s" in  *R*) optR=1              ;; esac
                     case "$s" in  *t*) optt=1              ;; esac
                     #case "$s" in  *X*) optmode='X'         ;; esac
                     shift;
                     case "$arg" in '') continue;; esac
                     ;;
          --perform|--start)
                     optp=1
                     shift
                     continue
                     ;;
          --recursive)
                     optR=1
                     shift
                     continue
                     ;;
          --extended-regexp)
                     optE=1
                     shift
                     continue
                     ;;
          --fixed-strings)
                     optF=1;
                     shift
                     continue
                     ;;
          --quick-overwrite|--quick-update)
                     optq=1
                     shift
                     continue
                     ;;
          --times)   optt=1
                     shift
                     continue
                     ;;
         #--dummy=*)
         #           optx=${s#--dummy=}
         #           shift
         #           continue
         #           ;;
          --)        optHH='--'
                     shift
                     break
                     ;;
          -*)        print_usage_and_exit
                     ;;
          *)         break
                     ;;
        esac
        ;;
    *)  arg=$1
        shift
        ;;
  esac
  case "$optmode" in
   #X) optX=$arg                                       ;;
    *) error_exit 1 'There is a BUG is in this program';;
  esac
  optmode=''
done
case "$#" in
  [01]) print_usage_and_exit   ;;
     *) pat=$1; sub=$2; shift 2;;
  *) 
esac

# === Validate options ===============================================
case "$optE$optF" in 11)
  error_exit 1 'conflicting matchers specified';;
esac
case "$pat" in *"$LF"*)
  error_exit 1 '<0x0A> in "regexp" argument is not allowed';;
esac


######################################################################
# Prepare for the Main Routine
######################################################################

# === Decide the option string for grep and sed ======================
opt4grep=''
opt4sed=''
CMDSED='sed'
case $optE       in  0) :;; *)
  if   [ $(echo ABC |  sed -E 's/.+/OK/' 2>/dev/null) = 'OK' ]; then
    opt4sed='-E'
  elif [ $(echo ABC |  sed -r 's/.+/OK/' 2>/dev/null) = 'OK' ]; then
    opt4sed='-r'
  elif [ $(echo ABC | gsed -r 's/.+/OK/' 2>/dev/null) = 'OK' ]; then
    opt4sed='-r'
    CMDSED='gsed'
  else
    error_exit 1 'No ERE supported sed is found. You cannot use -E option.'
  fi
  opt4grep="${opt4grep}E"
  ;;
esac
case $optF       in  0) :;; *) opt4grep="${opt4grep}F";; esac
case $optR       in  0) :;; *) opt4grep="${opt4grep}R";; esac
case "$opt4grep" in '') :;; *) opt4grep="-${opt4grep}";; esac
case "$optR$#" in
  '0'[01]) devnull='/dev/null';; # Dummy file to make grep print the filename
        *) devnull=''         ;;
esac

# === Decide the strings for grep and sed ============================
case $optF in
  0) pat4grep=$pat
     pat4sed=$(printf '%s\n' "$pat"                                          |
               # --- escape all of "/" ------------------------------------- #
               awk '                                                         #
                 BEGIN{                                                      #
                   # --- 0) initialize                                       #
                   OFS="";                                                   #
                   ORS="";                                                   #
                   iBra=0; # ==0 : out of a bracket                          #
                           # ==1 : on entering a bracket                     #
                           # >=1 : during in a bracket                       #
                   fEsc=0; # >0  : to have to escape the next character      #
                   fPcc=0; # >0  : possibility of the top of POSIX charclass #
                   # --- 1) start of line loop                               #
                   while (getline line) {                                    #
                   #                                                         #
                   # --- 2) start of character-loop                          #
                   l=length(line);                                           #
                   for (i=1; i<=l; i++) {                                    #
                   #                                                         #
                   # --- 3) get a character (or POSIX charclass)             #
                   if (fPcc==0)                    {                         #
                     s=substr(line,i,1);                                     #
                   } else                          {                         #
                     s1=substr(line,i);                                      #
                     if (match(s1,/^:[a-z]+:\]/)) {                          #
                       s=substr(s1,1,RLENGTH);                               #
                       i=i+RLENGTH-1;                                        #
                     }  else                      {                          #
                       s=substr(s1,1,      1);                               #
                     }                                                       #
                     fPcc=0;                                                 #
                   }                                                         #
                   #                                                         #
                   # --- 4) Escape "/" if required                           #
                   if (       iBra==0) {                                     #
                     if      (fEsc >0) {print s    ; fEsc=0; continue;}      #
                     if      (s=="\\") {print "\\" ; fEsc=1;          }      #
                     else if (s=="[" ) {print "["  ; iBra=1;          }      #
                     else if (s=="/" ) {print "\\/";                  }      #
                     else              {print s    ;                  }      #
                   } else if (iBra==1) {                                     #
                     if      (s=="^" ) {print "^"  ;                  }      #
                     else if (s=="[" ) {print "["  ; iBra=2; fPcc=1;  }      #
                     else              {print s    ; iBra=2;          }      #
                   } else              {                                     #
                     if      (s=="[" ) {print "["  ;         fPcc=1;  }      #
                     else if (s=="]" ) {print "]"  ; iBra=0;          }      #
                     else              {print s    ;                  }      #
                   }                                                         #
                   #                                                         #
                   # --- 5) end of character-loop                            #
                   }                                                         #
                   #                                                         #
                   # --- 6) end of line-loop                                 #
                   print "\n";                                               #
                   }                                                         #
                 }'                                                          )
     sub4sed=$(printf '%s\n' "${sub}_" |
               # --- escape all of "/" #
               sed 's/\//\\\//g'       )
     sub4sed=${sub4sed%_}
     ;;
  *) pat4grep=$pat
     pat4sed=$(printf '%s\n' "$pat"              |
               # --- escape all of BRE meta chrs.#
               sed 's/\([].\*/[]\)/\\\1/g'       |
               sed '1s/^^/\\^/'                  |
               sed '$s/$$/\\$/'                  )
     sub4sed=$(printf '%s\n' "${sub}_"           |
               # --- escape all of BRE meta chrs.#
               sed 's/\([\&/]\)/\\\1/g'          |
               sed 's/$/\\/'                     |
               sed '$s/\\$//'                    )
     sub4sed=${sub4sed%_}
     ;;
esac


######################################################################
# Main Routine (reharsal mode)
######################################################################

case $optp in 0)
  echo '*** Now working as rehearsal mode. (option "-p" lets me be a take)' 1>&2

  # === Make a temporary file if necessary ===========================
  case $# in 0)
    trap 'exit_trap' EXIT HUP INT QUIT PIPE ALRM TERM
    Tempfile=$(mktempf0)
    if [ $? -ne 0 ] || [ -z "$Tempfile" ]; then
      error_exit 1 'Cannot create a temporary file'
    fi
    cat | sort | uniq | sed 's/[ "'"'$(printf '\t\\')"']/\\&/g' > "$Tempfile"
    [ -s "$Tempfile" ] || error_exit 1 'No file'
  ;; esac

  # === Confirm ":" is not contained in the directories ==============
  msg1='WARNING!! Some filepathed contain ":".'
  msg2=' These cause destroying other files.'
  case $# in
    0) cat "$Tempfile"                           |
       (xargs find "$file") 2>/dev/null          |
       grep -q ':'                               &&
       printf '%s: %s\n' "${0##*/}" "$msg1$msg2" 1>&2
       ;;
    *) if find "$@" 2>/dev/null | grep -q ':' 2>/dev/null; then
         printf '%s: %s\n' "${0##*/}" "$msg1$msg2" 1>&2
       fi
       ;;
  esac

  # === Reharsal =====================================================
  case $# in
    0) cat "$Tempfile"                                    |
       (xargs grep $opt4grep $optHH "$pat4grep" $devnull)     2>/dev/null;;
    *)        grep $opt4grep $optHH "$pat4grep" $devnull "$@" 2>/dev/null;;
  esac
  ret=$?
  case "$#/$ret" in
   */0) exit 0                                                                ;;
   0/*) s='No file matched or grep error (perhaps, permission denied occured)';;
   */1) s='No file matched'                                                   ;;
   */*) s='grep error (perhaps, permission denied occured)'                   ;;
  esac
  error_exit $ret "$s"

;; esac


######################################################################
# Main Routine
######################################################################

# === Make a temporary file if necessary =============================
if ([ "$optq" -eq 0 ] || [ "$optt" -ne 0 ]); then
  trap 'exit_trap' EXIT HUP INT QUIT PIPE ALRM TERM
  Tempfile=$(mktempf0)
  if [ $? -ne 0 ] || [ -z "$Tempfile" ]; then
    error_exit 1 'Cannot create a temporary file'
  fi
fi

# === List target files ============================================= #
case $# in                                                            #
  0) cat                                              |               #
     sort                                             |               #
     uniq                                             |               #
     sed 's/[ "'"'$(printf '\t\\')"']/\\&/g'          |               #
     awk 'BEGIN{while(getline l){print l;i++;}        #               #
                if(i==0){print "/dev/null";}  }'      |               #
     xargs grep $opt4grep $optHH "$pat4grep" $devnull     ;;          #
  *)       grep $opt4grep $optHH "$pat4grep" $devnull "$@";;          #
esac                                                                  |
sed 's/:.*$//'                                                        |
uniq                                                                  |
                                                                      #
# === GREOing ======================================================= #
while IFS= read -r file0; do                                          #
  file=$file0                                                         #
  # 1) --- validate file                                              #
  if   [ -f "$file"      ]; then                                      #
    :                                                                 #
  elif [ -e "$file"      ]; then                                      #
    echo "Failure: not a regular file: $file0"                        #
    continue                                                          #
  else                                                                #
    echo "Failure: file not found: $file0"                            #
    continue                                                          #
  fi                                                                  #
  case "$file" in /*|./*|../*) :;; *) file="./$file";; esac           #
                                                                      #
  # 2) --- "greo" a file                                              #
  case $optq in                                                       #
    0) (cat "$file"; echo '')                   |                  #  #
       $CMDSED $opt4sed "s/$pat4sed/$sub4sed/g" |                  #  #
       awk 'BEGIN{ORS=""; OFS="";               #                  #  #
                  getline line;                 #                  #  #
                  print line;                   #                  #  #
                  dlm="\n";                     #                  #  #
                  while (getline line) {        #                  #  #
                    print dlm,line;             #                  #  #
                  }                     }'      > "$Tempfile"      && #
       case $optt in                                               #  #
         0) :                           ;;                         #  #
         *) touch -r "$file" "$Tempfile";;                         #  #
       esac                                                        && #
       cat "$Tempfile" > "$file" 2>/dev/null                       && #
       case $optt in                                               #  #
         0) :                                       ;;             #  #
         *) touch -r "$Tempfile" "$file" 2>/dev/null;;             #  #
       esac                                                           #
       ;;                                                             #
    *) case $optt in 0) :;; *) touch -r "$file" "$Tempfile";; esac && #
       ( rm "$file" 2>/dev/null                     &&             #  #
         { (cat; echo '')                           |              #  #
           $CMDSED $opt4sed "s/$pat4sed/$sub4sed/g" |              #  #
           awk 'BEGIN{ORS=""; OFS="";               #              #  #
                      getline line;                 #              #  #
                      print line;                   #              #  #
                      dlm="\n";                     #              #  #
                      while (getline line) {        #              #  #
                        print dlm,line;             #              #  #
                      }                     }'                     #  #
         } > "$file" 2>/dev/null                                   #  #
       ) <"$file"                                                  && #
       case $optt in                                               #  #
         0) :                                       ;;             #  #
         *) touch -r "$Tempfile" "$file" 2>/dev/null;;             #  #
       esac                                                           #
       ;;                                                             #
  esac                                                                #
  case $? in                                                          #
    0) echo "Success: GREOed: $file0"                ;;               #
    *) echo "Failure: failed to greo halfway: $file0";;               #
  esac                                                                #
done                                                                  |
                                                                      #
# === Decide the return code for this command ======================= #
awk 'BEGIN      {ret=0;                     }                         #
     /^Failure:/{ret=1;                     }                         #
                {print;                     }                         #
     END        {if(NR==0){ret=1;} exit ret;}'


######################################################################
# Finish
######################################################################

exit_trap $?
